<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd   
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd   
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!--   注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置。-->
	<mvc:annotation-driven />
	<!-- 要使用spring mvc中的@Controller注解，就必须要配置<mvc:annotation-driven />，否则org.springframework.web.servlet.DispatcherServlet无法找到控制器并把请求分发到控制器 -->
	<context:annotation-config />
	<!-- 扫描java包中相关的mvc元注解 -->
	<context:component-scan base-package="org.yy.demo.controller"></context:component-scan>
	
	
	<!--拦截器-->
	<!-- 
    <mvc:interceptors>
        <mvc:interceptor>
			<mvc:mapping path="/admin/*.do"/>
			<bean class="org.example.admin.ControlInterceptor" />
			</mvc:interceptor>
    </mvc:interceptors> -->
    
    
    <!-- 配置后，不会被springmvc(web.xml中配置的DispatcherServlet)处理 -->
	<mvc:resources mapping="/resources/**" location="/resources/" /> 


	<!--  1， 完成MessageConverter的注册
            2， 请求的方法中如果有＠RequestBody，将会采用消息转换器对request.getInputStrem的数据流进行转换
            3，请求的方法中如果有@ResponseBody, 将会采用消息转换器把返回结果写入到response.getOutputStrem中-->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	<!-- 启动JSON格式的配置,当有@ResponseBody元数据时，会使用它转换返回对象 -->
	<bean id="jacksonMessageConverter"
		class=" org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<!-- 解决 HttpMediaTypeNotAcceptableException: Could not find acceptable 
			representation -->
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- fastjson方式 <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"> 
		</bean> -->


	<!-- 上传拦截，如最大上传值及最小上传值 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000" /><!-- 设置允许上传的最大文件大小，以字节为单位计算。当设为-1时表示无限制，默认是-1。 -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="uploadTempDir" value="/home/zhouliang"></property><!-- 设置上传文件时的临时目录，默认是Servlet容器的临时目录。 -->
		<property name="maxInMemorySize" value="10240"></property><!--设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240。 -->
	</bean>

    <bean id="tilesConfigurer"
        class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles/tiles-config.xml</value>
            </list>
        </property>
    </bean>
	<!-- 根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.json返回json格式数据 /blog/1.xml返回xml格式数据 
		/blog.do返回jsp -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="false" />
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 在没有扩展名时即: "/user/1" 时的默认展现形式 -->
		<property name="defaultContentType" value="text/html" />
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<!-- spring3.1的配置模式 -->
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	           		 <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
	        	</bean>
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/" />
					<property name="suffix" value=".jsp"></property>
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<!-- for application/json org.springframework.web.servlet.view.json.MappingJacksonJsonView -->
				<bean class="org.yy.framework.base.view.FrameworkJacksonJsonView">
					<!-- 只处理非空值 -->
					<property name="objectMapper">
						<bean class="com.fasterxml.jackson.databind.ObjectMapper">
							<property name="serializationInclusion">
								<value type="com.fasterxml.jackson.annotation.JsonInclude$Include">NON_NULL</value>
							</property>
						</bean>
					</property>
				</bean>
				<!-- fastjson方式 --><!-- <bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView"> 
					<property name="charset" value="UTF8" /> </bean> -->
				<!-- for application/xml -->
				<!--  
				<bean class="org.yy.framework.base.view.FrameworkXtreamView"  > 
					<property name="marshaller"> <bean class="org.springframework.oxm.xstream.XStreamMarshaller"/></property>
				</bean> -->
			</list>
		</property>
	</bean>


	<!-- 服务化文档spring配置 -->
	<!-- 线上环境一般要注释 -->
	<bean id="simpleUrlMapping"
		class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/document.do">document</prop>
			</props>
		</property>
	</bean>
	<bean id="document" class="org.yy.framework.document.controller.DocumentController">
		<constructor-arg index="0">
			<list>
				<value>org.yy.demo.model</value>
				<value>org.yy.demo.dto</value>
			</list>
		</constructor-arg>
	</bean>


	<!-- 业务异常处理 -->
	<bean id="exceptionResolver" class="org.yy.framework.base.exception.AppExceptionResolver">
	</bean>

</beans>